customRules:
  mitre_rules.yaml: |-
    - rule: Base64-encoded Python Script Execution
      desc: >
        This rule detects base64-encoded Python scripts on command line arguments.
        Base64 can be used to encode binary data for transfer to ASCII-only command
        lines. Attackers can leverage this technique in various exploits to load
        shellcode and evade detection.
      condition: >
        spawned_process and (
          ((proc.cmdline contains "python -c" or proc.cmdline contains "python3 -c" or proc.cmdline contains "python2 -c") and
          (proc.cmdline contains "echo" or proc.cmdline icontains "base64"))
          or
          ((proc.cmdline contains "import" and proc.cmdline contains "base64" and proc.cmdline contains "decode"))
        )
      output: >
        Potentially malicious Python script encoded on command line
        (proc.cmdline=%proc.cmdline user.name=%user.name proc.name=%proc.name
        proc.pname=%proc.pname evt.type=%evt.type gparent=%proc.aname[2]
        ggparent=%proc.aname[3] gggparent=%proc.aname[4] evt.res=%evt.res
        proc.pid=%proc.pid proc.cwd=%proc.cwd proc.ppid=%proc.ppid
        proc.pcmdline=%proc.pcmdline proc.sid=%proc.sid proc.exepath=%proc.exepath
        user.uid=%user.uid user.loginuid=%user.loginuid
        user.loginname=%user.loginname group.gid=%group.gid group.name=%group.name
        image=%container.image.repository:%container.image.tag
        container.id=%container.id container.name=%container.name file=%fd.name)
      priority: warning
      tags:
        - ATOMIC_RED_T1037.004
        - MITRE_TA0005_defense_evasion
        - MITRE_T1027_obfuscated_files_and_information
      source: syscall
      append: false
      exceptions:
        - name: proc_cmdlines
          comps:
            - startswith
          fields:
            - proc.cmdline

    - rule: Detect outbound connections to common miner pool ports
      enabled: true
      
    - rule: Miner Binary Detected
      desc: "Malicious script or binary detected in pod or host. The rule was triggered by the execve syscall"
      condition: >
        spawned_process and (
          in_malicious_binaries or (
            proc.name in (shell_binaries) and
            scripts_in_or and
            not proc.args startswith "-c"
          )
        )
      output: >
        Malicious binary or script executed in the pod or host.
        proc.cmdline=%proc.cmdline evt.type=%evt.type evt.res=%evt.res
        proc.pid=%proc.pid proc.cwd=%proc.cwd proc.ppid=%proc.ppid
        proc.pcmdline=%proc.pcmdline proc.sid=%proc.sid proc.exepath=%proc.exepath
        user.uid=%user.uid user.loginuid=%user.loginuid
        user.loginname=%user.loginname user.name=%user.name group.gid=%group.gid
        group.name=%group.name container.id=%container.id
        container.name=%container.name %evt.args
      priority: WARNING
      tags:
        - cryptomining
        - mitre_persistence
      source: syscall
      
    - macro: in_malicious_binaries
      condition: (proc.name in (malicious_binaries))
    - list: malicious_binaries
      items:
        - "xmrig"
        - ".x1mr"
        - "nanominer"
        - "pwnrig"
        - "astrominer"
        - "eazyminer"
        - "pool-miner-linux64"
        
    - macro: scripts_in_or
      condition: (
        proc.args endswith "/wb.sh" or
        proc.args endswith "/ldr.sh" or
        proc.args endswith "aktualisieren.sh" or
        proc.args endswith "creds.sh" or
        proc.args endswith "cronb.sh" or
        proc.args endswith "abah1.sh" or
        proc.args endswith "/huh.sh" or
        proc.args endswith "ohshit.sh" or
        proc.args endswith "/mxr.sh" )
